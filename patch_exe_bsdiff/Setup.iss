; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyPatchName "Example Application 1.01"
#define MyAppName "Example Application"
#define MyAppVersion "1.01"
#define MyAppPublisher "Example Corporation"
#define MyAppURL "http:/example.com/"
#define MyAppExeName "example.exe"

#define MySetupResourceDir "..\setup_resources"

#define MyAppId "{{GUID-GUID-GUID-GUID-GUID}"

#define MyPatchToolDir "..\bsdiff\Release"
#define MyPatchSourceDir ".\diff"

; bspatch.exe or bspatch.dll
#define UseBSPatchDLL 1

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={#MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}

DefaultDirName={pf}\{#MyAppPublisher}\{#MyAppName}
;           or {pf}\{#MyAppPublisher} {#MyAppName}
;           or {pf}\{#MyAppName}

DefaultGroupName={#MyAppPublisher} {#MyAppName}
;             or {#MyAppName}

OutputDir=DISK1
OutputBaseFilename=setup
SolidCompression=yes

SetupIconFile={#MySetupResourceDir}/Setup.ico
WizardImageFile={#MySetupResourceDir}/SetupWizImage.bmp
WizardSmallImageFile={#MySetupResourceDir}/SetupWizSmallImage.bmp

; for Patch
UsePreviousAppDir=yes
CreateUninstallRegKey=no
UpdateUninstallLogAppName=no
; DisableDirPage=yes


[Files]
#if UseBSPatchDLL
Source: "{#MyPatchToolDir}\bspatch.dll"; Flags: dontcopy
#else
Source: "{#MyPatchToolDir}\bspatch.exe"; Flags: dontcopy
#endif
Source: "{#MyPatchSourceDir}\example.dat.diff"; Flags: dontcopy
Source: "{#MyPatchSourceDir}\example.exe.diff"; Flags: dontcopy

; Source: "{#MyPatchSourceDir}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[UninstallDelete]
Type: files; Name: "{app}\example_v2.dat"
Type: files; Name: "{app}\example_v2.exe"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\example_v2.exe"


[Languages]
;Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"

[CustomMessages]
;english.PatchTargetIsNotInstalled=Application '{#MyAppName}' is not installed. This setup requires the target application installed. Do you continue?
;english.FailedToApplyPatch=
japanese.PatchTargetIsNotInstalled=アプリケーション '{#MyAppName}' がインストールされていません。このセットアップは修正差分で対象となるアプリケーションが必要です。続行しますか？
japanese.FailedToApplyPatch=修正差分の適用に失敗しました。


[Code]

//
// Block setup if the application is not installed.
//

function InitializeSetup(): Boolean;
begin
  if Not RegKeyExists(HKLM, ExpandConstant('SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#MyAppId}_is1')) then begin
    Result := MsgBox(ExpandConstant('{cm:PatchTargetIsNotInstalled}'), mbConfirmation, MB_YESNO) = IDYES;
  end
  else begin
    Result := True;
  end;
end;


//
// bspatch
//

type TPatch = record
  old: String;
  new: String;
  diff: String;
end;
function Patch(o,n,d:String): TPatch;
var
  p: TPatch;
begin
  p.old := o; p.new := n; p.diff := d; Result := p;
end;

#if UseBSPatchDLL

function PatchDllFuncSetup(lpOldFile:String; lpNewFile:String; lpDiffFile:String): Integer;
external 'PatchFunc@files:bspatch.dll stdcall setuponly';

function ExecPatch(p:TPatch):Boolean;
begin
  ExtractTemporaryFile(p.diff);
  Result := PatchDllFuncSetup(ExpandConstant('{app}\')+p.old, ExpandConstant('{app}\')+p.new, ExpandConstant('{tmp}\')+p.diff) = 0;
end;

#else

function ExecPatch(p:TPatch):Boolean;
var
  ExecSucceeded: Boolean;
  ResultCode: Integer;
begin
  ExtractTemporaryFile(p.diff);
  ExecSucceeded := Exec(
    ExpandConstant('{tmp}\bspatch.exe'),
    ExpandConstant('"{app}\' + p.old + '" "{app}\' + p.new + '" "{tmp}\' + p.diff + '"'),
    ExpandConstant('{app}'), SW_SHOW, ewWaitUntilTerminated, ResultCode);
  Result := ExecSucceeded and (ResultCode = 0);
end;
#endif

function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  Patches: array[0..1] of TPatch;
  PatchSucceeded: Boolean;
  i: Integer;
begin
#if ! UseBSPatchDLL
  ExtractTemporaryFile(ExpandConstant('bspatch.exe'));
#endif

  Patches[0] := Patch('example.dat', 'example_v2.dat', 'example.dat.diff');
  Patches[1] := Patch('example.exe', 'example_v2.exe', 'example.exe.diff');

  for i := 0 to 1 do
  begin
    PatchSucceeded := ExecPatch(Patches[i]);
    if Not PatchSucceeded Then begin
      Result := ExpandConstant('{cm:FailedToApplyPatch}');
      Break;
    end;
  end;
end;
